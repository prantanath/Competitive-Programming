{
	// Place your C++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Disjoint set union": {
		"prefix": "DSU",
		"body": [
		  "struct DSU{",
		  "    ll n;",
		  "    vector<ll>parent,len;",
		  "    DSU(ll N){",
		  "        n = N;",
		  "        parent.assign(n+1,-1);",
		  "        len.assign(n+1,1);",
		  "        fr(i,0,n+1) parent[i]=i;",
		  "    }",
		  "    ll Find(ll x){",
		  "        if(parent[x] == x) return x;",
		  "        return parent[x] = Find(parent[x]);",
		  "    }",
		  "    void Union(ll a,ll b){",
		  "        a = Find(a);",
		  "        b = Find(b);",
		  "        if(a!=b){",
		  "            if(len[a]<len[b]){",
		  "                swap(a,b);",
		  "            }",
		  "            parent[b] = a;",
		  "            len[a]+=len[b];",
		  "        }",
		  "    }",
		  "};"
		],
		"description": "Disjoint set union"
	  }
}